[color]
	diff = auto
	status = auto
	branch = auto
	grep = auto
	sh = auto

[user]
	name = Kent Chen
	email = kent.chen@ubnt.com

[core]
	whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
	autocrlf = false
	excludesfile = ~/.gitignore
	commitGraph = true

[alias]
	aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort

	br = branch
	branchdiff = !bash -c \"git diff `git oldest-ancestor`...$@\"
	branchdirdiff = !bash -c \"git dirdiff `git oldest-ancestor`...$@\"
	branchlog = !bash -c \"git log `git oldest-ancestor`..$@\"
	branchall = !git for-each-ref --sort=committerdate --format='%(refname:short) * %(authorname) * %(committerdate:relative)' refs/remotes/ | column -t -s '*'
	oldest-ancestor = !bash -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-develop}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -

	ci = commit --verbose
	co = checkout
	dc = diff --cached

	dirdiff = difftool --dir-diff --extcmd=dirdiff
	dt = difftool
	meld = !git-meld.pl

	files = "!f() { git diff --name-status $1^ $1; }; f"

	clog = log --graph --date=short --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit
	lg = log --stat --decorate
	lo = log --oneline

	;pull = pull --rebase

	; For PR review
	prdiff = !git diff develop...
	prdirdiff = !git dirdiff develop...
	prlog = !git log develop..
	prtig = !tig develop..

	; git-flow: What else PRs to be merged between this branch and develop
	pr2merge = "!f() { git log --merges --pretty=format:\"%ai '%h' %s <%an>\" ..develop | grep \"Merge pull request\" | sort; }; f"

	root = rev-parse --show-toplevel

	s = status --short
	st = status

	show-vim = "!f() { git dirdiff $1^ $1; }; f"

	;sync = "!git stash; git pull --rebase --all; git push --all; git stash pop"
	sync-r = "!git stash; git pull --no-rebase --all --tags; git remote prune origin; git pr clean; git stash pop"

	; Undo a `git push`
	undopush = push -f origin HEAD^:develop

	zip = !git archive --format tar.gz -o $(git log --date=short --pretty=format:"%ad" -1).tar.gz HEAD

	# Get the child commit of the current commit
	# Use $1 instead of 'HEAD' if given
	# Use $2 instead of curent branch if given
	child = "!bash -c 'git log --format=%h --reverse --ancestry-path ${1:-HEAD}..${2:\"$(git rev-parse --abbrev-ref HEAD)\"} | head -1' -"

	# Rebase onto origin/develop and test by push --dry-run
	rebase-and-push = "!git fetch origin && git rebase origin/develop && git push -n --force-with-lease"

[branch]
	autosetupmerge = true
	autosetuprebase = always

[github]
	user = chenkaie

[color "sh"]
	branch = yellow ul
	workdir = blue bold
	dirty = red

[merge]
	tool = vimdiff

[diff]
	tool = vimdiff

[difftool]
	prompt = false

# push easily. http://stackoverflow.com/a/23918418/89484
[push]
	default = current

[help]
	autocorrect = 1

[http]
	sslVerify = false
	;proxy = http://172.16.2.54:8888/

[init]
	; custom git hooks
	templatedir = ~/.git_template

[pager]
	diff = diff-so-fancy | less --tabs=4 -RFX
	show = diff-so-fancy | less --tabs=4 -RFX

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
