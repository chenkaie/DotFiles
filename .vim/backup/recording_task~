#!/bin/sh
# /usr/bin/recording_task - This script executes recording start/stop
# $Id: 1.0.0.5 event_application $

set -a
PATH=/bin:/sbin:/usr/bin:/usr/sbin

MAX_FILE_SIZE=50000 #KB
MAX_FILE_LENGTH_IN_SECOND=60 #seconds

# Make sure there is only one recording_task executing at the same time
PIDFILE="/var/run/${1}_task.pid"
if [ -e "${PIDFILE}" ]; then
	recording_task_pid=`cat "${PIDFILE}"`
	if [ -d "/proc/${recording_task_pid}" ]; then
		echo "[REC_DEBUG] ${PIDFILE} exist, kill it!"
		kill -9 ${recording_task_pid}
	fi
fi
echo $$ > ${PIDFILE}

#source common define
. /etc/event_functions

PrintUsage="Usage: $0 recording_i[0-1] start[stop]"

Umount_Destination()
{
	${CONFCLIENT_PROG} -g "recording_i0_enable&recording_i1_enable" -p 9 > $rec_tempstatus
	. $rec_tempstatus && rm -f $rec_tempstatus
	${CONFCLIENT_PROG} -s "recording_i0_enable=0&recording_i1_enable=0" -p 9  > /dev/null
	/bin/umount $1
	${CONFCLIENT_PROG} -s "recording_i0_enable=${recording_i0_enable}&recording_i1_enable=${recording_i1_enable}" -p 9  > /dev/null
}

Check_CF_StorageStatus()
{
	rec_tempfile="$1/$$"
	rec_tempstatus="/tmp/rec.$$"
	cf_status=`touch $rec_tempfile 2>$rec_tempstatus| cat $rec_tempstatus`
	if echo $cf_status | grep "Read-only"; then
		Umount_Destination /mnt/auto/CF
		logger -t '[Recording_Task]' -p 'err' "Find CF storage Read-only status".
	else
		rm -f $rec_tempfile
		rm -f $rec_tempstatus
	fi
}

StorageLoad()
{
	case "$1" in
		cf)
			mount_point="/mnt/auto/CF"
			destination_path="/mnt/CF/link${2}"
			cf_destpath="/mnt/auto/CF/NCMF/${cf_path}"
			[ -d "$cf_destpath" ] || mkdir "$cf_destpath"
			;;
		[0-4])
			mount_point="/mnt/auto/i${1}"
			destination_path="/mnt/samba/link${1}"
			;;
		*)
			echo "Error storage type $1"
			exit 1
			;;
	esac

	[ ! -d "$mount_point" ] && unset destination_path && return 1

	if [ -L "$destination_path" ]; then
		[ ! -d "$destination_path" ] && mkdir -p "`ls $destination_path -l | sed 's/^.*-> //g'`"
	else
		#destination_path un-exist
		unset destination_path
		logger -t '[SYS]' -p 'warning' "Recording link miss!"
	fi
}

#=====Script Start Here=====
arg1=$1
arg2=$2
backup=$3

#=====Script Start Here=====
case "$1" in
	recording_i[0-1])
		recording_index=${1##recording_i}
		;;
	*)
		echo $PrintUsage
		exit 1
		;;
esac

case "$2" in
	start)
		${CONFCLIENT_PROG} -p 99 -g "${1}" -t SingleQuo -b > /tmp/$$.srcfile
		. /tmp/$$.srcfile && rm /tmp/$$.srcfile

		eval storage_type=\$${1}_dest
		eval recording_source=\$${1}_source
		eval prefix=\$${1}_prefix
		eval reserve_amount=\$${1}_reserveamount

		eval limitsize=\$${1}_limitsize
		eval cyclic=\$${1}_cyclic
		eval notify=0

		eval cyclesize=\$${1}_cyclesize
		eval cf_path=\$${1}_cffolder
		#eval datefolder=\$${1}_datefolder
		eval stream_num=$((${recording_source}+1))

		if [ "$limitsize" -eq "0" ]
		then
			total_cycle_size=1
		else
			total_cycle_size=0
		fi

		fnameformat="%Y%M%D/%h/${prefix}%m"

		StorageLoad $storage_type $recording_index;
		
		while [ -z "$destination_path" ]
		do
			logger -t '[SYS]' -p 'warning' "Recording entry $recording_index start failed"
			#$CONFCLIENT_PROG -s "${arg1}_enable=0" -p 9  > /dev/null
			/bin/umount ${mount_point}
			StorageLoad $storage_type $recording_index;
			sleep 60
		done

		#remove 3gp files
		rm -f ${destination_path}/*.3gp

  		eval video_source=\$VIDEO_${recording_source}_SOCKET
  		eval video_control=\$VIDEO_${recording_source}_FIFO
  		eval audio_source=\$AUDIO_${recording_source}_SOCKET
  		eval audio_control=\$AUDIO_${recording_source}_FIFO
  		
  		if [ "$storage_type" = "cf" ]; then
			Check_CF_StorageStatus $cf_destpath;
		fi

 		logger -t '[SYS]' -p 'info' "Recording entry $recording_index start"
		#$FIFO_PROG -n -f -p $RECORDER_FIFO -r "man-record-start name=$1 videosocket=$video_source audiosocket=$audio_source length=3600 maxsize=$maxfilesize filename=\"${fnameformat}\" location=${destination_path} totalsize=${total_cycle_size} enablecycle=${cyclic} enablenotify=${notify}\n"
 		echo "man-record-start name=$1 videosocket=$video_source audiosocket=$audio_source length=$MAX_FILE_LENGTH_IN_SECOND maxsize=$MAX_FILE_SIZE filename=\"${fnameformat}\" location=${destination_path}" totalsize=${total_cycle_size} reserveamount=${reserve_amount} enablecycle=${cyclic} enablenotify=${notify} backup=${backup} > $RECORDER_FIFO
		echo "runcmd $FIFO_PROG -n -p $audio_control -c '<control id=\"${RECORDER_ID}\"><forceCI/><output>start</output></control>'" > $RECORDER_FIFO
		echo "runcmd $FIFO_PROG -n -p $video_control -c '<control id=\"${RECORDER_ID}\" stream=\"${stream_num}\"><forceCI/><output>start</output></control>'" > $RECORDER_FIFO
		;;
	stop)
		#$FIFO_PROG -n -f -p $RECORDER_FIFO -r "man-record-stop name=${1}\n"
		echo "man-record-stop name=$1" > $RECORDER_FIFO
		logger -t '[SYS]' -p 'info' "Recording entry $recording_index stop"
		#sync
		;;
	*)
		echo $PrintUsage
		;;
esac

exit 0
