#!/bin/sh
# /usr/bin/spacecleaner - This script manager recording space size
# $Id: 1.0.0.4 spacecleaner $

set -a
PATH=/sbin:/bin:/usr/bin:/usr/sbin

CONF_PROG="/usr/sbin/confclient"
NOTIFY_LOG_FILE="/tmp/recording_notify.log"
BACKUP_LOG_FILE="/tmp/recording_notify0.log"
LIMIT_LOG_SIZE=32	#32K

if [ "$#" -ne 4 ]; then
	echo "The input parameters error!"
	exit 1
fi

RECORD_FOLDER="$1"
DO_CYCLE="$2"
RECORD_NAME="$3"
RESERVE_AMOUNT="$4" #KB

MAX_CLEAN_SIZE=1000 # 1000MB
MAX_CLEAN_SIZE_IN_PERCENTAGE=20 # %

# For each recorder, make sure there is only one spacecleaner executing at the same time
PIDFILE="/var/run/${RECORD_NAME}_spacecleaner.pid"
if [ -e "${PIDFILE}" ]; then
	spacecleaner_pid=`cat "${PIDFILE}"`
	if [ -d "/proc/$spacecleaner_pid" ]; then
		echo "[REC_DEBUG] ${PIDFILE} exist!"
		exit 1
	fi
fi
echo $$ > ${PIDFILE}
trap "rm -f ${PIDFILE}; exit 1" INT KILL TERM EXIT

_EXIT()
{
	rm -f "${PIDFILE}"
	trap - INT TERM EXIT
	exit $1
}

#########################################################
Notify()
{
	/usr/bin/fifocmd -s /var/run/eventmgr/emsocket -e "<message><recnotify id=\"0\">trigger</recnotify></message>"
}
#########################################################
Manager_Log()
{
	eval log_size=`du "${NOTIFY_LOG_FILE}" | cut -f 1`
	if [ "${log_size}" -ge "${LIMIT_LOG_SIZE}" ]; then
		mv ${NOTIFY_LOG_FILE} ${BACKUP_LOG_FILE}
		echo "========== Recording logfile ==========" > $NOTIFY_LOG_FILE
	fi
}
#########################################################
Remove_Recording_Folder()
{
	DATE_INFO=`date`
	#echo "kill $1 [$2]"
	echo "kill $1"
	if [ ! -e $NOTIFY_LOG_FILE ]; then
		echo "========== Recording logfile ==========" > $NOTIFY_LOG_FILE
	fi
	Manager_Log
	echo $DATE_INFO "[${RECORD_NAME}]" {Folder Name:"$1"} was deleted. >> $NOTIFY_LOG_FILE
	rm -rf "$1"
	KILLFILE="1"
}
#########################################################
Warning_Nothing_To_Removed()
{
	DATE_INFO=`date`
	if [ ! -e $NOTIFY_LOG_FILE ]; then
		echo "========== Recording logfile ==========" > $NOTIFY_LOG_FILE
	fi
	Manager_Log
	echo $DATE_INFO "[${RECORD_NAME}]" {"There is no recording folder to be removed"}  >> $NOTIFY_LOG_FILE
	rm -rf "$1"
	KILLFILE="1"
}
#########################################################
Generate_Full_Notify()
{
	DATE_INFO=`date`
	# Generate space full warning message
	if [ ! -e "$NOTIFY_LOG_FILE" ]; then
		echo "========== Recording logfile ==========" > $NOTIFY_LOG_FILE
	fi
	Manager_Log
    	echo "$DATE_INFO [${RECORD_NAME}] The Disk Space of Recording Is Full, It will stop recording. " >> $NOTIFY_LOG_FILE
    	echo "$DATE_INFO [${RECORD_NAME}] Please clear the disk first and enable recording action again." >> $NOTIFY_LOG_FILE
}
#########################################################
Check_Empty_Folder()
{
    # check if empty folder and remove it
    if [ -d "$1" ]; then
        echo "Check Empty Folder: $1"
        rmdir "$1"
        if [ $? = 0 ] ; then
            echo "remove $1"
        else
            echo "$1 is not empty"
        fi
    fi
}
#########################################################
Space_Cleaner()
{
    IFS="
    "
	[ -d "$RECORD_FOLDER" ] || _EXIT 1
	cd "$RECORD_FOLDER"

	KILLFILE="0"

	# Case 1: icyclic = 0, limitsize = 0
	# Case 2: icyclic = 1, limitsize = 0
	# Case 3: icyclic = 0, limitsize = 1
	# Case 4: icyclic = 1, limitsize = 1
    
    # case 1, 3
    if [ "$DO_CYCLE" = "0" ]; then
        #echo "stop recording and set recording disable"
        RECORD_INDEX=${RECORD_NAME}"_enable=0"
        $CONF_PROG -s $RECORD_INDEX -p 9
        logger -t '[Recording]' -p 'err' "Disable recording action! Please check the storage.".
        Generate_Full_Notify
        Notify
        _EXIT 0

    else  # case 2, 4
        #Cleanup $MAX_CLEAN_SIZE_IN_PERCENTAGE of $TOTAL_SIZE && $TOTAL_SIZE <= $MAX_CLEAN_SIZE
        TOTAL_SIZE=`df -m | grep "/mnt/auto/" | awk '{print $2}'`
        #the variable will be overflow in busybox v1.0 if variable >= 2^31 = 2147483648 (2TB in df), do division before multiply
        space_need_to_be_cleanup=`expr $TOTAL_SIZE / 100 \* $MAX_CLEAN_SIZE_IN_PERCENTAGE` 
        [ "$space_need_to_be_cleanup" -gt "$MAX_CLEAN_SIZE" ] && space_need_to_be_cleanup=$MAX_CLEAN_SIZE

        recording_folders=`ls -d ${RECORD_FOLDER}/*/*/ | egrep '(19|20)[0-9][0-9](0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])/(0[0-9]|[1][0-9]|2[0-3])/'`
        if [ -z "$recording_folders" ]; then
            Warning_Nothing_To_Removed
        else
            for target_folder in $recording_folders
            do
                #oldest_hour_folder=$target_folder
                Remove_Recording_Folder "${target_folder}"

                #clear empty folder
                oldest_date_folder=`dirname \`echo $target_folder\``
                Check_Empty_Folder "${oldest_date_folder}"

                df_available=`df -m | grep "/mnt/auto/" | awk '{printf("%d\n",$4)}'`
                [ "$df_available" -gt `expr $space_need_to_be_cleanup + $RESERVE_AMOUNT / 1000` ] && break
            done
        fi
    fi

    # let recorder to get spacecleaner's result
    if [ "$KILLFILE" = "1" ]; then
        Notify
    fi

}
#########################################################
Check_CF_StorageStatus()
{
	rec_tempfile="$1/$$"
	rec_tempstatus="/tmp/rec.$$"
	cf_status=`touch $rec_tempfile 2>$rec_tempstatus| cat $rec_tempstatus`
	if echo $cf_status | grep "Read-only"; then
		$CONF_PROG -g "recording_i0_enable&recording_i1_enable" -p 9 > $rec_tempstatus
		. $rec_tempstatus
		#echo ${recording_i0_enable} ${recording_i1_enable}
		$CONF_PROG -s "recording_i0_enable=0&recording_i1_enable=0" -p 9  > /dev/null
		/bin/umount /mnt/auto/CF
		$CONF_PROG -s "recording_i0_enable=${recording_i0_enable}&recording_i1_enable=${recording_i1_enable}" -p 9  > /dev/null
		rm -f $rec_tempstatus
		rm -f ${1}/*.3gp
		logger -t '[Recording]' -p 'err' "Find CF storage Read-only status".
	else
		rm -f $rec_tempfile
		rm -f $rec_tempstatus
	fi
}
#########################################################
#echo "Start Space_Cleaner..."
if echo $RECORD_FOLDER | grep "/mnt/auto/CF"; then
	Check_CF_StorageStatus $RECORD_FOLDER
fi

Space_Cleaner
echo "#########################################################"
_EXIT 0
